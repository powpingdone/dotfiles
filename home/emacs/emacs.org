#+TITLE: PPD's Emacs
#+AUTHOR: powpingdone
#+STARTUP: show2levels

* TABLE OF CONTENTS
:PROPERTIES:
:TOC: :include all :ignore this 
:END:
:CONTENTS:
- [[#notes][NOTES]]
- [[#priority-load][PRIORITY LOAD]]
  - [[#emacs-main-config][Emacs main config]]
  - [[#evil-mode-vim-binds][Evil Mode (vim binds)]]
  - [[#which-key][Which Key]]
  - [[#generalel-binding-creation][General.el (binding creation)]]
- [[#org-mode][ORG MODE]]
  - [[#org-config][Org config]]
  - [[#org-modern][Org Modern]]
  - [[#org-modern-indent][Org Modern Indent]]
  - [[#table-of-contents][Table of contents]]
  - [[#org-roam][Org Roam]]
  - [[#org-noter][Org Noter]]
  - [[#org-appear][Org Appear]]
- [[#apperance][APPERANCE]]
  - [[#emacs-config][Emacs Config]]
  - [[#doom-themes][Doom themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#tree-sitter][Tree sitter]]
  - [[#beacon][Beacon]]
  - [[#pdf-tools][PDF Tools]]
:END:


* NOTES
:PROPERTIES:
:CUSTOM_ID: notes
:END:
+ use-package is already loaded in nix, and as such packages come from nix
 
  
* PRIORITY LOAD
:PROPERTIES:
:CUSTOM_ID: priority-load
:END:

** Emacs main config
:PROPERTIES:
:CUSTOM_ID: emacs-main-config
:END:

#+begin_src emacs-lisp

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

#+end_src

** Evil Mode (vim binds)
:PROPERTIES:
:CUSTOM_ID: evil-mode-vim-binds
:END:

#+begin_src emacs-lisp

  (use-package evil
    :demand t
    :init
    (setq evil-vsplit-window-right 't
    evil-split-window-below 't
    evil-toggle-key "C-~"
    evil-want-keybinding 'nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-tutor)

#+end_src

** Which Key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:

#+begin_src emacs-lisp

  (use-package which-key
    :demand t
    :config (which-key-mode)
    :custom
    (which-key-idle-delay 0.325))

#+end_src

** General.el (binding creation)
:PROPERTIES:
:CUSTOM_ID: generalel-binding-creation
:END:

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    
    ;; LEADER is space (thanks doomemacs!)
    (general-create-definer leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; insert mode

    ;; buffer binds
    (leader-key
     "b" '(:ignore t :wk "buffer")
     "bb" '(switch-to-buffer :wk "switch buffer")
     "bd" '(kill-this-buffer :wk "kill buffer")
     "bn" '(next-buffer :wk "next buffer")
     "bp" '(previous-buffer :wk "previous buffer")
     "br" '(revert-buffer :wk "reload buffer"))

    )

#+end_src


* ORG MODE
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

** Org config
:PROPERTIES:
:CUSTOM_ID: org-config
:END:

#+begin_src emacs-lisp

  (use-package org
    :init
    (setq org-enforce-todo-dependencies t
	  org-hide-leading-stars t
      	  org-startup-indented t
    	  org-src-preserve-indentation t)
    :config
    :hook
    (org-mode . org-indent-mode)
    (org-mode . (lambda () (display-line-numbers-mode -1))))
                
#+end_src

** Org Modern
:PROPERTIES:
:CUSTOM_ID: org-modern
:END:
Org mode but more fancy and pretty.

#+begin_src emacs-lisp

  (use-package org-modern
    :after org
    :config
    (global-org-modern-mode)
    :init
    (setq org-modern-keyword nil
	  org-modern-star 'replace
	  org-modern-hide-stars " "))

#+end_src

** Org Modern Indent
:PROPERTIES:
:CUSTOM_ID: org-modern-indent
:END:
Because org-indent is nice but org-modern blocks don't like it. Uses a nixos derivation to fetch.

#+begin_src emacs-lisp

  (use-package org-modern-indent
    :after org-modern
    :config
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))

#+end_src

** Table of contents 
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
Adds a table of contents to an org mode documents.

#+begin_src emacs-lisp

  (use-package org-make-toc
    :init
    (setq org-make-toc-insert-custom-ids t)
    :after org
    :hook (org-mode . org-make-toc-mode))

#+end_src

** Org Roam
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:
Cross link org mode documents.

#+begin_src emacs-lisp

  (use-package org-roam
    :after org)

#+end_src

** Org Noter
:PROPERTIES:
:CUSTOM_ID: org-noter
:END:
Requires pdf-tools to markup documents. Annotate PDF pages with org mode.

#+begin_src emacs-lisp

  (use-package org-noter
    :commands org-noter
    :after (org-roam org pdf-tools)
    :config
    (org-noter-enable-org-roam-integration))
          
#+end_src

** Org Appear
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:
To quote: Make invisible parts of Org elements appear visible. Stuff like links actually work and can be (un)hidden.

#+begin_src emacs-lisp

  (use-package org-appear
    :init
    (setq org-appear-trigger 'manual
	  org-appear-autolinks t)
    :hook
    (org-mode .
      (lambda ()
        (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
        (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t))
      ))

#+end_src


* APPERANCE
:PROPERTIES:
:CUSTOM_ID: apperance
:END:

** Emacs Config
:PROPERTIES:
:CUSTOM_ID: emacs-config
:END:
Stock emacs stuff that makes me vomit less.

#+begin_src emacs-lisp

  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (set-fringe-mode 8)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
  (dolist (mode '(term-mode-hook eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))
  (set-face-attribute 'variable-pitch nil :family "Liberation Sans" :height 1.1)
  (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 1.1)
  
#+end_src

** Doom themes
:PROPERTIES:
:CUSTOM_ID: doom-themes
:END:
I wish I had something similar to sainnhe/edge but doom-one is ok for right now.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))

#+end_src

** Doom Modeline
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
My modeline looks so nice! 

#+begin_src emacs-lisp

  (use-package doom-modeline
    :demand t
    :hook after-init
    :init
    (setq doom-modeline-height 28))

#+end_src

** Tree sitter
:PROPERTIES:
:CUSTOM_ID: tree-sitter
:END:
Fancy syntax highlighting. NixOS provides all the treesit-grammars.

#+begin_src emacs-lisp

   (use-package treesit-auto
     :demand t
     :config
     (global-treesit-auto-mode))

#+end_src

** Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:END:
My cursor is right here!

#+begin_src emacs-lisp
  (use-package beacon
    :demand t
    :config
    (beacon-mode 1))
#+end_src

** PDF Tools
:PROPERTIES:
:CUSTOM_ID: pdf-tools
:END:
Viewing PDFs in emacs has never been more easy!

#+begin_src emacs-lisp

  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1))))

#+end_src
