#+TITLE: PPD's Emacs
#+AUTHOR: powpingdone
#+STARTUP: showeverything

* TABLE OF CONTENTS
:PROPERTIES:
:TOC: :include all :ignore this :ignore NOTES
:END:

:CONTENTS:
- [[#notes][NOTES]]
- [[#priority-load][PRIORITY LOAD]]
  - [[#emacs-main-config][Emacs main config]]
  - [[#evil-mode-vim-binds][Evil Mode (vim binds)]]
  - [[#which-key][Which Key]]
  - [[#generalel-binding-creation][General.el (binding creation)]]
- [[#org-mode][ORG MODE]]
  - [[#general-config-and-appearance][General config and appearance]]
  - [[#table-of-contents][Table of contents]]
  - [[#note-taking][Note taking]]
- [[#apperance][APPERANCE]]
  - [[#emacs-config][Emacs Config]]
  - [[#doom-themes][Doom themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#tree-sitter][Tree sitter]]
:END:

* NOTES
+ use-package is already loaded in nix, and as such packages come from nix

* PRIORITY LOAD

** Emacs main config

#+begin_src emacs-lisp

    (require 'use-package-ensure)
    (setq use-package-always-ensure t)

#+end_src

** Evil Mode (vim binds)

#+begin_src emacs-lisp

      (use-package evil
        :demand t
        :init
        (setq evil-vsplit-window-right t
        evil-split-window-below t
        evil-toggle-key "C-~"
        evil-want-keybinding t)
        :config
        (evil-mode 1))

      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))

      (use-package evil-tutor)

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :demand t
    :config (which-key-mode)
    :custom
    (which-key-idle-delay 0.325))

#+end_src

** General.el (binding creation)

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    
    ;; LEADER is space (thanks doomemacs!)
    (general-create-definer leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; insert mode

    ;; buffer binds
    (leader-key
     "b" '(:ignore t :wk "buffer")
     "bb" '(switch-to-buffer :wk "switch buffer")
     "bd" '(kill-this-buffer :wk "kill buffer")
     "bn" '(next-buffer :wk "next buffer")
     "bp" '(previous-buffer :wk "previous buffer")
     "br" '(revert-buffer :wk "reload buffer"))

    )

#+end_src


* ORG MODE

** General config and appearance

#+begin_src emacs-lisp

    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets
      :hook org-mode)
      
#+end_src

** Table of contents 

#+begin_src emacs-lisp

    (use-package org-make-toc
      :hook org-mode)

#+end_src

** Note taking 

#+begin_src emacs-lisp

  (use-package org-roam
    :hook org-mode)
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :hook (pdf-view-mode-hook . (lambda () (line-number-mode 'nil) (display-line-numbers-mode 'nil))) 
  )  

      (use-package org-noter
        :hook org-mode
        :config
        (org-noter-enable-org-roam-integration))
      
#+end_src

* APPERANCE

** Emacs Config

#+begin_src emacs-lisp

  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (set-fringe-mode 4)
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode 1)
  
#+end_src

** Doom themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :demand t
    :config
    (setq doom-themes-enable-bold t
  	  doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

#+end_src

** Doom Modeline

#+begin_src emacs-lisp

      (use-package doom-modeline
        :demand t
        :hook after-init
  :init
  (setq doom-modeline-height 28))

#+end_src

** Tree sitter

#+begin_src emacs-lisp

 (use-package treesit-auto
   :demand t
   :config
   (global-treesit-auto-mode))

#+end_src
