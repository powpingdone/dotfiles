#+TITLE: PPD's Emacs
#+AUTHOR: powpingdone
#+STARTUP: show2levels

* TABLE OF CONTENTS
:PROPERTIES:
:TOC: :include all :ignore this 
:END:
:CONTENTS:
- [[#notes][NOTES]]
- [[#priority-load][PRIORITY LOAD]]
  - [[#emacs-use-package-config][Emacs use-package config]]
  - [[#evil-mode-vim-binds][Evil Mode (vim binds)]]
  - [[#which-key][Which Key]]
  - [[#generalel-binding-creation][General.el (binding creation)]]
  - [[#vertico-completion][Vertico (completion)]]
  - [[#consult-vertico-commands][Consult (vertico commands)]]
  - [[#orderless-completion-style][Orderless (completion style)]]
- [[#apperance][APPERANCE]]
  - [[#emacs-config][Emacs Config]]
  - [[#doom-themes][Doom themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#tree-sitter][Tree sitter]]
  - [[#beacon][Beacon]]
  - [[#olivetti][Olivetti]]
  - [[#rainbow-delimeters][Rainbow Delimeters]]
- [[#tools][TOOLS]]
  - [[#novel-epub-support][Nov.el (epub support)]]
  - [[#pdf-tools][PDF Tools]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#undo-tree][Undo Tree]]
  - [[#magit][Magit]]
  - [[#xml][XML]]
- [[#org-mode][ORG MODE]]
  - [[#org-config][Org config]]
  - [[#org-babel-async][Org babel async]]
  - [[#table-of-contents][Table of contents]]
  - [[#org-noter][Org Noter]]
  - [[#org-appear][Org Appear]]
  - [[#org-super-agenda][Org Super Agenda]]
- [[#programming][PROGRAMMING]]
  - [[#corfu][Corfu]]
  - [[#eglot][EGlot]]
  - [[#flycheck][Flycheck]]
  - [[#format-all][Format all]]
  - [[#nix-mode][Nix Mode]]
  - [[#rust-mode][Rust Mode]]
  - [[#direnv][Direnv]]
:END:


* NOTES
:PROPERTIES:
:CUSTOM_ID: notes
:END:
+ use-package is already loaded in nix, and as such packages come from nix
  
* PRIORITY LOAD
:PROPERTIES:
:CUSTOM_ID: priority-load
:END:

** Emacs use-package config
:PROPERTIES:
:CUSTOM_ID: emacs-use-package-config
:END:
Basically, nixos provides the packages (for rollback reasons) and emacs loads them in.

#+begin_src emacs-lisp
    (setq use-package-always-ensure t)
    (eval-when-compile (require 'use-package))
#+end_src

** Evil Mode (vim binds)
:PROPERTIES:
:CUSTOM_ID: evil-mode-vim-binds
:END:

#+begin_src emacs-lisp
    (use-package evil
      :demand t
      :init
      (setq
       evil-vsplit-window-right t
       evil-split-window-below t
       evil-toggle-key "C-~"
       evil-want-keybinding nil
       evil-undo-system 'undo-tree)
      :config
      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-tutor)
#+end_src

** Which Key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:

You know what which key is.

#+begin_src emacs-lisp
    (use-package which-key
      :demand t
      :config (which-key-mode)
      :custom
      (which-key-idle-delay 0.325))
#+end_src

** General.el (binding creation)
:PROPERTIES:
:CUSTOM_ID: generalel-binding-creation
:END:
I dunno why i'm using this but it's probably good.

#+begin_src emacs-lisp
    (use-package general
      :demand t
      :config
      (general-evil-setup)

      ;; LEADER is space (thanks doomemacs!)
      (general-create-definer leader-key
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "C-M-SPC") ;; insert mode

      (leader-key
        ;; buffer binds
        "b" '(:ignore t :wk "buffer")
        "bd" '(kill-this-buffer :wk "kill buffer")
        "bn" '(next-buffer :wk "next buffer")
        "bp" '(previous-buffer :wk "previous buffer")
        "br" '(revert-buffer :wk "reload buffer")
        "bi" '(ibuffer :wk "ibuffer")
        ;; help binds
        "h" '(:ignore t :wk "help")
        "hf" '(describe-function :wk "describe function")
        "hv" '(describe-variable :wk "describe variable")
        "hm" '(describe-mode :wk "describe mode")
        "hR" '(ppd/reload-emacs :wk "reload emacs")
        "h!" '(restart-emacs :wk "restart emacs")
        ;; toggles
        "t" '(:ignore t :wk "toggle")
        "tl" '(display-line-numbers-mode :wk "Line numbers")
        "tt" '(visual-line-mode :wk "Truncated lines")
        "tm" '(indent-tabs-mode :wk "Tabs or Spaces indent")
        ;; find
        "f" '(:ignore t :wk "find")
        ;; language specific
        "l" '(:ignore t :wk "lang")
        "l`" '(comment-line :wk "comment line(s)")
        ;; emacs programs
        "d" '(:ignore t :wk "programs"))
      )
#+end_src

** Vertico (completion)
:PROPERTIES:
:CUSTOM_ID: vertico-completion
:END:

Completion framework for various commands.

#+begin_src emacs-lisp
    (use-package vertico
      :demand t
      :config
      (vertico-mode))

    (use-package savehist
      :demand t
      :config
      (savehist-mode))

    (use-package emacs
      :init
      (setq enable-recursive-minibuffers t
            read-extended-command-predicate #'command-completion-default-include-p
            minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      :hook
      (minibuffer-setup . cursor-intangible-mode))
#+end_src

** Consult (vertico commands)
:PROPERTIES:
:CUSTOM_ID: consult-vertico-commands
:END:
Some useful functions that use vertico. 

#+begin_src emacs-lisp
    (use-package consult
      :init
      (leader-key
        "bb" '(consult-buffer : "find buffer")
        "fc" '((lambda () (interactive) (consult-find "/etc/nixos")) :wk "Edit file in NixOS config")
        "ff" '(consult-find :wk "Find file")
        "fo" '((lambda () (interactive) (consult-find "~/org")) :wk "Open org dir")
        "fq" '((lambda () (interactive) (consult-find "~/extern")) :wk "Open extern")
        "fg" '(consult-ripgrep :wk "Grep files"))
      :config
      (consult-customize :preview-key 'any
    		     consult-ripgrep consult-git-grep consult-grep
    		     consult-bookmark consult-recent-file
    		     consult--source-bookmark consult--source-file-register
    		     consult--source-recent-file consult--source-project-recent-file
    		     :preview-key '(:debounce 0.625 any)))

    (use-package consult-flycheck
      :after (flycheck consult)
      :config
      (leader-key "l-" '(consult-flycheck :wk "Messages")))

    (use-package consult-eglot
      :after (eglot consult)
      :init
      (leader-key
        :map eglot-mode-map
        "lR" '(consult-eglot-symbols :wk "Symbols")))
#+end_src

** Orderless (completion style)
:PROPERTIES:
:CUSTOM_ID: orderless-completion-style
:END:

No grep needed. Just type in letters that exist.

#+begin_src emacs-lisp
    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src


* APPERANCE
:PROPERTIES:
:CUSTOM_ID: apperance
:END:

** Emacs Config
:PROPERTIES:
:CUSTOM_ID: emacs-config
:END:
Stock emacs stuff that makes me vomit less or make emacs work faster.

#+begin_src emacs-lisp
    ; disable/enable obvious things
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode 1)
    (dolist (mode '(term-mode-hook eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode -1))))
    (electric-indent-mode -1)
    (auto-save-mode -1)
    ; little bit of fringe
    (set-fringe-mode 8)
    ; terminal fun stuff
    (setenv "TERM" "xterm-256color")
    (setq read-process-output-max (* 1024 1024)
          tab-always-indent 'complete
          completion-cycle-threshold 2)
#+end_src

** Doom themes
:PROPERTIES:
:CUSTOM_ID: doom-themes
:END:
I wish I had something similar to sainnhe/edge but doom-one is ok for right now.

#+begin_src emacs-lisp
    (use-package doom-themes
      :init
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
      :config
      (load-theme 'doom-one t)
      (custom-set-faces
       `(variable-pitch ((t (:font "DejaVu Serif" :height 1.05))))
       `(fixed-pitch ((t (:font "DejaVu Sans Mono" :height 1.05))))))
#+end_src

** Doom Modeline
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
My modeline looks so nice! 

#+begin_src emacs-lisp
    (use-package doom-modeline
      :demand t
      :hook after-init
      :init
      (setq doom-modeline-height 28))
#+end_src

** Tree sitter
:PROPERTIES:
:CUSTOM_ID: tree-sitter
:END:
Fancy syntax highlighting. NixOS provides all the treesit-grammars.

#+begin_src emacs-lisp
    (use-package treesit-auto
      :demand t
      :config
      (global-treesit-auto-mode))
#+end_src

** Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:END:
My cursor is right here!

#+begin_src emacs-lisp
    (use-package beacon
      :defer t
      :hook
      (after-init . beacon-mode))
#+end_src

** Olivetti
:PROPERTIES:
:CUSTOM_ID: olivetti
:END:
Zen mode but nicer.

#+begin_src emacs-lisp
    (use-package olivetti
      :commands olivetti-mode
      :init
      (leader-key
        "tz" '(olivetti-mode :wk "Zen Mode/Olivetti Mode"))
      (setq olivetti-style 'fancy
            olivetti-body-width 96)
      :config
      (set-face-attribute 'olivetti-fringe nil
                              :background (doom-color 'base3)
                              :foreground (doom-color 'base3)))
#+end_src

** Rainbow Delimeters
:PROPERTIES:
:CUSTOM_ID: rainbow-delimeters
:END:
Figure out what delimits what with color changing parens!

#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook
      prog-mode)
#+end_src


* TOOLS
:PROPERTIES:
:CUSTOM_ID: tools
:END:
** Nov.el (epub support) 
:PROPERTIES:
:CUSTOM_ID: novel-epub-support
:END:
Support for .epub files.

#+begin_src emacs-lisp
    (use-package nov
      :defer t
      :commands (nov-mode)
      :mode ; case insenitive
      ("\\.[Ee][Pp][Uu][Bb]\\'" . nov-mode))
#+end_src

** PDF Tools
:PROPERTIES:
:CUSTOM_ID: pdf-tools
:END:
Viewing PDFs in emacs has never been more easy!

#+begin_src emacs-lisp
    (use-package pdf-tools
      :magic ("%PDF" . pdf-view-mode)
      :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

** Sudo Edit
:PROPERTIES:
:CUSTOM_ID: sudo-edit
:END:
Open a file with root priveleges.

#+begin_src emacs-lisp
    (use-package sudo-edit
      :config
      (leader-key
        ;; sudo file binds
        "fu" '(sudo-edit-find-file :wk "SUDO find file")
        "fU" '(sudo-edit :wk "SUDO this file")))
#+end_src

** Undo Tree
:PROPERTIES:
:CUSTOM_ID: undo-tree
:END:
Version controlled undo! 
... wait that's incorrect. A tree of all changes.

#+BEGIN_src emacs-lisp
    (use-package undo-tree
      :config
      (global-undo-tree-mode)
      (leader-key
        "dU" '(undo-tree-visualize :wk "Visualize undos and redos")))
#+end_src

** Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:
The git client that everybody goes nuts over.

#+begin_src emacs-lisp
    (use-package magit
      :config
      (leader-key
        "G" '(magit-dispatch :wk "Git menu (magit-dispatch)")))
#+end_src

** XML
:PROPERTIES:
:CUSTOM_ID: xml
:END:
Really, this is just adding hideshow support for XML docs.

#+begin_src emacs-lisp
    (use-package hideshow
      :after (sgml-mode)
      :config
      (add-to-list 'hs-special-modes-alist
                   '(nxml-mode
    		 "<!--\\|<[^/>]*[^/]>"
    		 "-->\\|</[^/>]*[^/]>"
    		 "<!--"
    		 sgml-skip-tag-forward
    		 nil)))

    (use-package nxml-mode
      :hook
      (nxml-mode . hs-minor-mode))
#+end_src


* ORG MODE
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

** Org config
:PROPERTIES:
:CUSTOM_ID: org-config
:END:

Do you think god stays in heaven because he fears org mode?

#+begin_src emacs-lisp
    (use-package org
      :init
      (require 'doom-themes)
      (leader-key
        "da" 'org-agenda
        "dc" 'org-capture
        "ds" 'org-store-link)
      (leader-key
        :keymaps 'org-mode-map
        "lh" '(org-shiftmetaleft :wk "Promote headline")
        "ll" '(org-shiftmetaright :wk "Demote headline")
        "lj" '(org-shiftmetadown :wk "Move headline down")
        "lk" '(org-shiftmetaup :wk "Move headline up")
        "ls" '(org-edit-special :wk "Edit block"))
      (setq
       org-capture-templates
       '(("j" "Work Log Entry"
          entry (file+olp+datetree "~/org/work-log.org")
          "* %<%R> %?" :empty-lines 0)
         ("t" "TODO"
          entry (file+headline "~/org/tasks.org" "General Tasks")))
       org-preview-latex-default-process 'dvisvgm
       org-enforce-todo-dependencies t
       org-use-fast-todo-selection t
       org-hide-leading-stars t
       org-startup-indented t
       org-src-preserve-indentation 'nil
       org-default-notes-file "~/org/tasks.org"
       org-agenda-files '("~/org")
       org-log-done 'time
       org-return-follows-link t
       org-indent-indentation-per-level 4
       org-edit-src-content-indentation 4)
      (plist-put org-format-latex-options :scale 0.75)
      (custom-set-faces
       `(org-level-8 ((t (:font "DejaVu Serif" :height 1.00 :inherit 'outline-8))))
       `(org-level-7 ((t (:font "DejaVu Serif" :height 1.00 :inherit 'outline-7))))
       `(org-level-6 ((t (:font "DejaVu Serif" :height 1.00 :inherit 'outline-6))))
       `(org-level-5 ((t (:font "DejaVu Serif" :height 1.00 :inherit 'outline-5))))
       `(org-level-4 ((t (:font "DejaVu Serif" :height 1.05 :inherit 'outline-4))))
       `(org-level-3 ((t (:font "DejaVu Serif" :height 1.10 :inherit 'outline-3))))
       `(org-level-2 ((t (:font "DejaVu Serif" :height 1.15 :inherit 'outline-2))))
       `(org-level-1 ((t (:font "DejaVu Serif" :height 1.20 :inherit 'outline-1))))
       `(org-tag ((t (:foreground ,(doom-color 'doc-comments) :inherit 'fixed-pitch))))
       `(org-document-title ((t (:font "DejaVu Serif" :height 1.6))))
       `(org-hide ((t :inherit 'fixed-pitch :foreground ,(doom-color 'bg))))
       `(org-block ((t (:inherit 'fixed-pitch :extend t))))
       `(org-table ((t (:inherit 'fixed-pitch :foreground ,(doom-color 'violet)))))
       `(org-property-value ((t (:foreground ,(doom-color 'doc-comments) :inherit 'fixed-pitch :extend t)))))
      :hook
      (org-mode . olivetti-mode)
      (org-mode . org-indent-mode)
      (org-mode . visual-line-mode)
      (org-mode . variable-pitch-mode)
      (org-mode . (lambda ()
                    (display-line-numbers-mode 0)
                    (indent-tabs-mode 0)))
      :config
      (require 'org-tempo)
      (require 'org-agenda)
      (require 'ob)
      (require 'ob-async)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (org . t)
         (latex . t)
         (gnuplot . t)
         (python . t)
         (sql . t))))
#+end_src

** Org babel async
:PROPERTIES:
:CUSTOM_ID: org-babel-async
:END:
Execute code asyncronously!

#+begin_src emacs-lisp
    (use-package ob-async)
#+end_src

** Table of contents
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
Adds a table of contents to an org mode documents.

#+begin_src emacs-lisp
    (use-package org-make-toc
      :init
      (setq org-make-toc-insert-custom-ids t)
      :after org
      :hook (org-mode . org-make-toc-mode))
#+end_src

** Org Noter
:PROPERTIES:
:CUSTOM_ID: org-noter
:END:
Requires pdf-tools to markup documents. Annotate PDF pages with org mode.

#+begin_src emacs-lisp
    (use-package org-noter
      :commands org-noter
      :after (org-roam org)
      :init
      (leader-key
        :keymaps 'org-mode-map
        "lQ" 'org-noter)
      :config
      (org-noter-enable-org-roam-integration)
      (leader-key
        :keymaps '(org-noter-doc-mode-map org-noter-notes-mode-map)
        "lr" '(org-noter-insert-note :wk "Insert Note")
        "lR" '(org-noter-insert-precise-note :wk "Insert Precise Note")
        "lf" '(org-noter-sync-next-note :wk "Next Note")
        "li" '(org-noter-sync-prev-note :wk "Prev Note")
        "l." '(org-noter-sync-current-note :wk "Current Note")
        "lF" '(org-noter-sync-next-page-or-chapter :wk "Next Page/Chapter")
        "lI" '(org-noter-sync-prev-page-or-chapter :wk "Prev Page/Chapter")
        "l>" '(org-noter-sync-current-page-or-chapter :wk "Current Page/Chapter")))
#+end_src

** TODO Org Appear
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:
To quote: Make invisible parts of Org elements appear visible. Stuff like links actually work and can be (un)hidden.

TODO: This doesn't seem to be functional right now.

#+begin_src emacs-lisp
    (use-package org-appear
      :init
      (setq org-appear-trigger 'manual
            org-appear-autolinks t)
      :hook
      (org-mode .
                (lambda ()
                  (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
                  (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t))
                ))
#+end_src

** TODO Org Super Agenda
:PROPERTIES:
:CUSTOM_ID: org-super-agenda
:END:
A "better agenda" that sorts by priority and today.

TODO: Make sure to set this up accordingly. 

#+begin_src emacs-lisp
    (use-package org-super-agenda
      :demand t
      :config
      (org-super-agenda-mode))
#+end_src


* PROGRAMMING
:PROPERTIES:
:CUSTOM_ID: programming
:END:
** Corfu 
:PROPERTIES:
:CUSTOM_ID: corfu
:END:
That popup thing for mini completion.

#+begin_src emacs-lisp
    (use-package corfu
      :init
      (setq corfu-auto t
    	corfu-auto-delay 0.375
            corfu-cycle t
    	corfu-quit-at-boundary nil
    	corfu-preselect 'prompt
    	corfu-on-exact-match nil)
      :hook
      (prog-mode . corfu-mode))
#+end_src

** EGlot 
:PROPERTIES:
:CUSTOM_ID: eglot
:END:
LSP. Nuff said. Configure langs as needed.

#+begin_src emacs-lisp
    (use-package eglot
      :after (company-mode)
      :commands (eglot eglot-ensure)
      :init
      ;; init on modes
      (dolist (hook
    	   '(python-mode nix-mode rust-mode))
        (add-hook (intern
    	       (concat (symbol-name hook) "-hook")) 'eglot))
      (setq eglot-sync-connect 1
            eglot-autoshutdown t
            eglot-auto-display-help-buffer nil
    	eglot-stay-out-of '(flymake))
      (leader-key
        :keymap 'eglot-mode-map
        "lk" '(xref-find-definitions :wk "Definition")
        "le" '(xref-find-references :wk "References")
        "lp" '(eglot-find-implementation :wk "Implementation")
        "lt" '(eglot-find-typeDefinition :wk "Type Definition")
        "l?" '(eldoc :wk "Documentation"))  
      :config
      (dolist (mode-server '(
        			 (nix-mode . ("nixd"))))
        (add-to-list 'eglot-server-programs mode-server)))
#+end_src

** Flycheck
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:

Inline syntax notes. 

#+begin_src emacs-lisp
    (flymake-mode -1)

    (use-package flycheck
      :hook
      (after-init . global-flycheck-mode)
      :init
      (setq flycheck-check-syntax-automatically
            '(mode-enabled save new-line idle-change idle-buffer-switch)
            flycheck-idle-change-delay 0.375
            flycheck-idle-buffer-switch-delay 0.650
            flycheck-buffer-switch-check-intermediate-buffers 'nil))

    (use-package flycheck-eglot
      :hook (eglot-managed-mode . flycheck-eglot-mode))
#+end_src

** Format all
:PROPERTIES:
:CUSTOM_ID: format-all
:END:
Auto format text/code.

#+begin_src emacs-lisp
    (use-package format-all
      :commands format-all-mode
      :hook
      (prog-mode . format-all-mode)
      :config
      (leader-key
        :keymaps 'prog-mode-map
        "lO" '(format-all-buffer :wk "Format")))
#+end_src

** Nix Mode
:PROPERTIES:
:CUSTOM_ID: nix-mode
:END:
Syntax highlighting for nix.

#+begin_src emacs-lisp
    (use-package nix-mode
      :hook
      (nix-mode . (lambda ()
    		(setq-local eglot-workspace-configuration
    			    '(:nixd (:formatting (:command [ "alejandra" ])))))))
#+end_src

** Rust Mode
:PROPERTIES:
:CUSTOM_ID: rust-mode
:END:
Rust mode.

#+begin_src emacs-lisp
    (use-package rust-mode
      :init
      (setq rust-mode-treesitter-derive t))
#+end_src

** Direnv
:PROPERTIES:
:CUSTOM_ID: direnv
:END:
Auto setup special environments with an .envrc.

#+begin_src emacs-lisp
    (use-package direnv
      :demand t
      :config
      (direnv-mode))
#+end_src
