#+TITLE: PPD's Emacs
#+AUTHOR: powpingdone
#+STARTUP: show2levels

* TABLE OF CONTENTS
:PROPERTIES:
:TOC: :include all :ignore this 
:END:
:CONTENTS:
- [[#notes][NOTES]]
- [[#priority-load][PRIORITY LOAD]]
  - [[#emacs-use-package-config][Emacs use-package config]]
  - [[#evil-mode-vim-binds][Evil Mode (vim binds)]]
  - [[#which-key][Which Key]]
  - [[#generalel-binding-creation][General.el (binding creation)]]
  - [[#vertico-completion][Vertico (completion)]]
  - [[#consult-vertico-commands][Consult (vertico commands)]]
- [[#apperance][APPERANCE]]
  - [[#emacs-config][Emacs Config]]
  - [[#doom-themes][Doom themes]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#tree-sitter][Tree sitter]]
  - [[#beacon][Beacon]]
  - [[#olivetti][Olivetti]]
  - [[#rainbow-delimeters][Rainbow Delimeters]]
- [[#tools][TOOLS]]
  - [[#pdf-tools][PDF Tools]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#undo-tree][Undo Tree]]
  - [[#magit][Magit]]
- [[#org-mode][ORG MODE]]
  - [[#org-config][Org config]]
  - [[#org-babel-async][Org babel async]]
  - [[#org-modern][Org Modern]]
  - [[#org-modern-indent][Org Modern Indent]]
  - [[#table-of-contents][Table of contents]]
  - [[#org-roam][Org Roam]]
  - [[#org-noter][Org Noter]]
  - [[#org-appear][Org Appear]]
  - [[#org-super-agenda][Org Super Agenda]]
- [[#programming][PROGRAMMING]]
  - [[#eglot][EGLOT]]
  - [[#flycheck][Flycheck]]
  - [[#format-all][Format all]]
  - [[#nix-mode][Nix Mode]]
:END:


* NOTES
:PROPERTIES:
:CUSTOM_ID: notes
:END:
+ use-package is already loaded in nix, and as such packages come from nix
  
  
* PRIORITY LOAD
:PROPERTIES:
:CUSTOM_ID: priority-load
:END:

** Emacs use-package config
:PROPERTIES:
:CUSTOM_ID: emacs-use-package-config
:END:
Basically, nixos provides the packages (for rollback reasons) and emacs loads them in.

#+begin_src emacs-lisp
    (setq use-package-always-ensure t)
    (eval-when-compile (require 'use-package))
#+end_src

** Evil Mode (vim binds)
:PROPERTIES:
:CUSTOM_ID: evil-mode-vim-binds
:END:

#+begin_src emacs-lisp
    (use-package evil
      :demand t
      :init
      (setq
       evil-vsplit-window-right t
       evil-split-window-below t
       evil-toggle-key "C-~"
       evil-want-keybinding nil
       evil-undo-system 'undo-tree)
      :config
      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-tutor)
#+end_src

** Which Key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:

You know what which key is.

#+begin_src emacs-lisp
    (use-package which-key
      :demand t
      :config (which-key-mode)
      :custom
      (which-key-idle-delay 0.325))
#+end_src

** General.el (binding creation)
:PROPERTIES:
:CUSTOM_ID: generalel-binding-creation
:END:
I dunno why i'm using this but it's probably good.

#+begin_src emacs-lisp
    (use-package general
      :demand t
      :config
      (general-evil-setup)

      ;; LEADER is space (thanks doomemacs!)
      (general-create-definer leader-key
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "C-M-SPC") ;; insert mode

      (leader-key
        ;; buffer binds
        "b" '(:ignore t :wk "buffer")
        "bd" '(kill-this-buffer :wk "kill buffer")
        "bn" '(next-buffer :wk "next buffer")
        "bp" '(previous-buffer :wk "previous buffer")
        "br" '(revert-buffer :wk "reload buffer")
        "bi" '(ibuffer :wk "ibuffer")
        ;; help binds
        "h" '(:ignore t :wk "help")
        "hf" '(describe-function :wk "describe function")
        "hv" '(describe-variable :wk "describe variable")
        "hm" '(describe-mode :wk "describe mode")
        "hR" '(ppd/reload-emacs :wk "reload emacs")
        "h!" '(restart-emacs :wk "restart emacs")
        ;; toggles
        "t" '(:ignore t :wk "toggle")
        "tl" '(display-line-numbers-mode :wk "Line numbers")
        "tt" '(visual-line-mode :wk "Truncated lines")
        "tm" '(indent-tabs-mode :wk "Tabs or Spaces indent")
        ;; find
        "f" '(:ignore t :wk "find")
        ;; language specific
        "l" '(:ignore t :wk "lang")
        "l`" '(comment-line :wk "comment line(s)")
        ;; emacs programs
        "d" '(:ignore t :wk "programs")
        "da" 'org-agenda
        "dc" 'org-capture
        "ds" 'org-store-link)
      )
#+end_src

** Vertico (completion)
:PROPERTIES:
:CUSTOM_ID: vertico-completion
:END:

Completion framework for various commands.

#+begin_src emacs-lisp
    (use-package vertico
      :demand t
      :config
      (vertico-mode))

    (use-package savehist
      :demand t
      :config
      (savehist-mode))

    (use-package emacs
      :init
      (setq enable-recursive-minibuffers t
            read-extended-command-predicate #'command-completion-default-include-p
            minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      :hook
      (minibuffer-setup . cursor-intangible-mode))
#+end_src

** Consult (vertico commands)
:PROPERTIES:
:CUSTOM_ID: consult-vertico-commands
:END:
Some useful functions that use vertico. 

#+begin_src emacs-lisp
    (use-package consult
      :init
      (leader-key
        "bb" '(consult-buffer : "find buffer")
        "fc" '((lambda () (interactive) (consult-find "/etc/nixos")) :wk "Edit file in NixOS config")
        "ff" '(consult-find :wk "Find file")
        "fo" '((lambda () (interactive) (consult-find "~/org")) :wk "Open org dir")
        "fq" '((lambda () (interactive) (consult-find "~/extern")) :wk "Open extern")
        "fg" '(consult-ripgrep :wk "Grep files"))
      :config
      (consult-customize :preview-key (list :debounce 0.05 'any)))
#+end_src


* APPERANCE
:PROPERTIES:
:CUSTOM_ID: apperance
:END:

** Emacs Config
:PROPERTIES:
:CUSTOM_ID: emacs-config
:END:
Stock emacs stuff that makes me vomit less.

#+begin_src emacs-lisp
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (set-fringe-mode 8)
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode 1)
    (dolist (mode '(term-mode-hook eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode -1))))
    (set-face-attribute 'variable-pitch nil :family "DejaVu Sans" :height 1.2)
    (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 1.2)
    (electric-indent-mode -1)
    (auto-save-mode -1)
    (setenv "TERM" "xterm-256color")
#+end_src

** Doom themes
:PROPERTIES:
:CUSTOM_ID: doom-themes
:END:
I wish I had something similar to sainnhe/edge but doom-one is ok for right now.

#+begin_src emacs-lisp
    (use-package doom-themes
      :init
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
      :config
      (load-theme 'doom-one t))
#+end_src

** Doom Modeline
:PROPERTIES:
:CUSTOM_ID: doom-modeline
:END:
My modeline looks so nice! 

#+begin_src emacs-lisp
    (use-package doom-modeline
      :demand t
      :hook after-init
      :init
      (setq doom-modeline-height 28))
#+end_src

** Tree sitter
:PROPERTIES:
:CUSTOM_ID: tree-sitter
:END:
Fancy syntax highlighting. NixOS provides all the treesit-grammars.

#+begin_src emacs-lisp
    (use-package treesit-auto
      :demand t
      :config
      (global-treesit-auto-mode))
#+end_src

** Beacon
:PROPERTIES:
:CUSTOM_ID: beacon
:END:
My cursor is right here!

#+begin_src emacs-lisp
    (use-package beacon
      :demand t
      :config
      (beacon-mode 1))
#+end_src

** Olivetti
:PROPERTIES:
:CUSTOM_ID: olivetti
:END:
Zen mode but nicer.

#+begin_src emacs-lisp
    (use-package olivetti
      :commands olivetti-mode
      :init
      (leader-key
        "tz" '(olivetti-mode :wk "Zen Mode/Olivetti Mode"))
      (setq olivetti-style 'fancy
            olivetti-body-width 104)
      :config
      (set-face-attribute 'olivetti-fringe nil
                              :background (doom-color 'base3)
                              :foreground (doom-color 'base3)))
#+end_src

** Rainbow Delimeters
:PROPERTIES:
:CUSTOM_ID: rainbow-delimeters
:END:
Figure out what delimits what with color changing parens!

#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook
      prog-mode)
#+end_src


* TOOLS
:PROPERTIES:
:CUSTOM_ID: tools
:END:
** PDF Tools
:PROPERTIES:
:CUSTOM_ID: pdf-tools
:END:
Viewing PDFs in emacs has never been more easy!

#+begin_src emacs-lisp
    (use-package pdf-tools
      :magic ("%PDF" . pdf-view-mode)
      :hook (pdf-view-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

** Sudo Edit
:PROPERTIES:
:CUSTOM_ID: sudo-edit
:END:
Open a file with root priveleges.

#+begin_src emacs-lisp
    (use-package sudo-edit
      :config
      (leader-key
        ;; sudo file binds
        "fu" '(sudo-edit-find-file :wk "SUDO find file")
        "fU" '(sudo-edit :wk "SUDO this file")))
#+end_src

** Undo Tree
:PROPERTIES:
:CUSTOM_ID: undo-tree
:END:
Version controlled undo! 
... wait that's incorrect. A tree of all changes.

#+BEGIN_src emacs-lisp
    (use-package undo-tree
      :config
      (global-undo-tree-mode)
      (leader-key
        "dU" '(undo-tree-visualize :wk "Visualize undos and redos")))
#+end_src

** Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:
The git client that everybody goes nuts over.

#+begin_src emacs-lisp
    (use-package magit
      :config
      (leader-key
        "G" '(magit-dispatch :wk "Git menu (magit-dispatch)")))
#+end_src


* ORG MODE
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

** Org config
:PROPERTIES:
:CUSTOM_ID: org-config
:END:

Do you think god stays in heaven because he fears org mode?

#+begin_src emacs-lisp
    (use-package org
      :init
      (require 'doom-themes)
      (leader-key
        :keymaps 'org-mode-map
        "ls" '(org-edit-special :wk "Edit block"))
      (setq org-enforce-todo-dependencies t
            org-use-fast-todo-selection t
            org-hide-leading-stars t
            org-startup-indented t
            org-src-preserve-indentation 'nil
            org-default-notes-file "~/org/tasks.org"
            org-agenda-files '("~/org")
            org-log-done 'time
            org-return-follows-link t
            org-indent-indentation-per-level 4
            org-edit-src-content-indentation 4
            org-capture-templates '(
                                    ("j" "Work Log Entry"
                                     entry (file+datetree "~/org/work-log.org")
                                     "* %?" :empty-lines 0)
                                    ("t" "TODO"
                                     entry (file+headline "~/org/tasks.org" "General Tasks"))))
      :hook
      (org-mode . olivetti-mode)
      (org-mode . org-indent-mode)
      (org-mode . visual-line-mode)
      (org-mode . (lambda ()
                    (display-line-numbers-mode 0)
                    (indent-tabs-mode 0)))
      :config
      (require 'org-tempo)
      (require 'org-agenda)
      (require 'ob)
      (require 'ob-async)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (org . t)
         (latex . t)
         (gnuplot . t)
         (python . t))))
#+end_src

** Org babel async
:PROPERTIES:
:CUSTOM_ID: org-babel-async
:END:
Execute code asyncronously!

#+begin_src emacs-lisp
    (use-package ob-async)
#+end_src

** Org Modern
:PROPERTIES:
:CUSTOM_ID: org-modern
:END:
Org mode but more fancy and pretty.

#+begin_src emacs-lisp
    (use-package org-modern
      :after org
      :config
      (global-org-modern-mode)
      :init
      (setq org-modern-keyword nil
            org-modern-star 'replace
            org-modern-hide-stars " "))
#+end_src

** Org Modern Indent
:PROPERTIES:
:CUSTOM_ID: org-modern-indent
:END:
Because org-indent is nice but org-modern blocks don't like it. Uses a nixos derivation to fetch.

#+begin_src emacs-lisp
    (use-package org-modern-indent
      :after org-modern
      :config
      (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** Table of contents
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
Adds a table of contents to an org mode documents.

#+begin_src emacs-lisp
    (use-package org-make-toc
      :init
      (setq org-make-toc-insert-custom-ids t)
      :after org
      :hook (org-mode . org-make-toc-mode))
#+end_src

** TODO Org Roam
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:
Cross link org mode documents.

TODO: Add which key bindings to this.

#+begin_src emacs-lisp
    (use-package org-roam
      :after org
      :init
      (setq org-roam-directory (file-truename "~/org/roam"))
      :config
      (org-roam-db-autosync-mode))
#+end_src

** Org Noter
:PROPERTIES:
:CUSTOM_ID: org-noter
:END:
Requires pdf-tools to markup documents. Annotate PDF pages with org mode.

#+begin_src emacs-lisp
    (use-package org-noter
      :commands org-noter
      :after (org-roam org)
      :init
      (leader-key
        :keymaps 'org-mode-map
        "lQ" 'org-noter)
      :config
      (org-noter-enable-org-roam-integration)
      (leader-key
        :keymaps '(org-noter-doc-mode-map org-noter-notes-mode-map)
        "lr" '(org-noter-insert-note :wk "Insert Note")
        "lR" '(org-noter-insert-precise-note :wk "Insert Precise Note")
        "lf" '(org-noter-sync-next-note :wk "Next Note")
        "li" '(org-noter-sync-prev-note :wk "Prev Note")
        "l." '(org-noter-sync-current-note :wk "Current Note")
        "lF" '(org-noter-sync-next-page-or-chapter :wk "Next Page/Chapter")
        "lI" '(org-noter-sync-prev-page-or-chapter :wk "Prev Page/Chapter")
        "l>" '(org-noter-sync-current-page-or-chapter :wk "Current Page/Chapter")))
#+end_src

** TODO Org Appear
:PROPERTIES:
:CUSTOM_ID: org-appear
:END:
To quote: Make invisible parts of Org elements appear visible. Stuff like links actually work and can be (un)hidden.

TODO: This doesn't seem to be functional right now.

#+begin_src emacs-lisp
    (use-package org-appear
      :init
      (setq org-appear-trigger 'manual
            org-appear-autolinks t)
      :hook
      (org-mode .
                (lambda ()
                  (add-hook 'evil-insert-state-entry-hook #'org-appear-manual-start nil t)
                  (add-hook 'evil-insert-state-exit-hook #'org-appear-manual-stop nil t))
                ))
#+end_src

** TODO Org Super Agenda
:PROPERTIES:
:CUSTOM_ID: org-super-agenda
:END:
A "better agenda" that sorts by priority and today.

TODO: Make sure to set this up accordingly. 

#+begin_src emacs-lisp
    (use-package org-super-agenda
      :demand t
      :config
      (org-super-agenda-mode))
#+end_src


* PROGRAMMING
:PROPERTIES:
:CUSTOM_ID: programming
:END:
** TODO EGLOT
:PROPERTIES:
:CUSTOM_ID: eglot
:END:
LSP. Nuff said.

Probably needs to have other langs configured.

#+begin_src emacs-lisp
    (use-package eglot
      :init
      (setq eglot-workspace-configuration '(:nil
    					(:formatting (:command ("alejandra")))))
      :config
      ;; Ensure `nil` is in your PATH.
      (add-to-list 'eglot-server-programs '(nix-mode . ("nil")))
      :hook
      (nix-mode . eglot-ensure))
#+end_src

** Flycheck
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:

Inline syntax notes. 

#+begin_src emacs-lisp
    (flymake-mode -1)

    (use-package flycheck
      :hook
      (after-init . global-flycheck-mode)
      :init
      (setq flycheck-check-syntax-automatically
            '(mode-enabled save new-line idle-change idle-buffer-switch)
            flycheck-idle-change-delay 0.375
            flycheck-idle-buffer-switch-delay 0.650
            flycheck-buffer-switch-check-intermediate-buffers 'nil))

    (use-package flycheck-eglot
      :ensure t
      :after (flycheck eglot)
      :config
      (global-flycheck-eglot-mode 1))

    (use-package consult-flycheck
      :after (flycheck consult)
      :config
      (leader-key "l-" '(consult-flycheck :wk "Messages")))
#+end_src

** Format all
:PROPERTIES:
:CUSTOM_ID: format-all
:END:
Auto format text/code.

#+begin_src emacs-lisp
    (use-package format-all
      :commands format-all-mode
      :hook
      (prog-mode . format-all-mode)
      :config
      (leader-key
        :keymaps 'prog-mode-map
        "lO" '(format-all-buffer :wk "Format")))
#+end_src

** Nix Mode
:PROPERTIES:
:CUSTOM_ID: nix-mode
:END:
Syntax highlighting for nix.

#+begin_src emacs-lisp
    (use-package nix-mode)
#+end_src
